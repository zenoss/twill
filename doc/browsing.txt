=======================
Web browsing with twill
=======================

Proxy servers
~~~~~~~~~~~~~

twill understands the ``http_proxy`` environment variable generically
used to set proxy server information.  To use a proxy in UNIX or
Windows, just set the ``http_proxy`` environment variable, e.g. ::

   % export http_proxy="http://www.someproxy.com:3128"

or ::

   % setenv http_proxy="http://www.someotherproxy.com:3148"

Recording scripts
~~~~~~~~~~~~~~~~~

Writing twill scripts is boring.  One simple way to get at least a
rough initial script is to use the maxq_ recorder to generate a twill
script.  maxq_ acts as an HTTP proxy and records all HTTP traffic; I
have written a simple twill script generator for it.  The script
generator and installation docs are included in the twill distribution
under the directory ``maxq/``.

Running and using tidy
~~~~~~~~~~~~~~~~~~~~~~

The ``tidy`` program does a nice job of producing correct HTML from
mangled, broken, eeevil Web pages.  By default, twill will run pages
through ``tidy`` before processing them.  This is on by default
because the Python libraries that parse HTML are very bad at dealing
with incorrect HTML, and will often return incorrect results on "real
world" Web pages.

To disable this feature, set ``config do_run_tidy 0``.

If ``tidy`` is not installed, twill will silently ignore it.  It may
be desirable to *require* a functioning ``tidy`` installation; so, to fail
when ``tidy`` *isn't* installed, set ``config tidy_should_exist 1``.

See the `tidy page`_ for more information on ``tidy``.

Miscellaneous implementation details
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 * twill ignores robots.txt.

 * http-equiv=refresh headers are handled immediately, independent of the
   'pause' component of the 'content' attribute.

 * twill does not understand javascript.

.. _maxq: http://maxq.tigris.org/
.. _tidy page: http://tidy.sourceforge.net/
